<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mohan Pudasaini</title>
    <link>https://pudasainimohan.com.np/</link>
      <atom:link href="https://pudasainimohan.com.np/index.xml" rel="self" type="application/rss+xml" />
    <description>Mohan Pudasaini</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Copyright © 2023 Mohan Pudasaini </copyright><lastBuildDate>Sun, 26 Feb 2023 20:00:00 +0000</lastBuildDate>
    <image>
      <url>https://pudasainimohan.com.np/images/icon_hufd524095cdf588a6150542fb56b950be_222925_512x512_fill_lanczos_center_3.png</url>
      <title>Mohan Pudasaini</title>
      <link>https://pudasainimohan.com.np/</link>
    </image>
    
    <item>
      <title>Syllabus</title>
      <link>https://pudasainimohan.com.np/courses/ds_basics/syllabus/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0100</pubDate>
      <guid>https://pudasainimohan.com.np/courses/ds_basics/syllabus/</guid>
      <description>&lt;style&gt;
  .callout {
    background-color: #f8f8f8;
    border: 6px solid #ffa500;
    margin: 1em auto;
    padding: 0.3em 10px;
    text-align: center;
    border-width: 2px;
    font-size: 1.2em;
    display: block;
    font-weight: 1000;
    animation: blink 01.5s infinite;
  }
  
  .callout.note {
    border-color: #00bfff;
  }
  
  @keyframes blink {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
    100% {
      opacity: 1;
    }
  }
&lt;/style&gt;
&lt;div class=&#34;callout note&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://pudasainimohan.com.np/courses/ds_basics/registration-form/&#34;&gt;To participate in the workshop, please click here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Introduction to Python
&lt;ul&gt;
&lt;li&gt;Overview of Python and its IDEs&lt;/li&gt;
&lt;li&gt;Installing Python and Jupyter Notebook&lt;/li&gt;
&lt;li&gt;Introduction to Jupyter Notebook environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Basic Data Types in Python
&lt;ul&gt;
&lt;li&gt;Lists, Dictionaries, Tuples, and Sets&lt;/li&gt;
&lt;li&gt;Using Python as a calculator&lt;/li&gt;
&lt;li&gt;Basic arithmetic and logical operations&lt;/li&gt;
&lt;li&gt;Descriptive statistics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Types, Objects, and Methods in Python
&lt;ul&gt;
&lt;li&gt;Understanding objects and data types&lt;/li&gt;
&lt;li&gt;Converting data types&lt;/li&gt;
&lt;li&gt;Method syntax&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Working with Strings in Python
&lt;ul&gt;
&lt;li&gt;Built-in string operations, functions, and methods&lt;/li&gt;
&lt;li&gt;Reading and writing text files (local and internet)&lt;/li&gt;
&lt;li&gt;Indexing and slicing strings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Numpy Arrays
&lt;ul&gt;
&lt;li&gt;Creating arrays with Numpy&lt;/li&gt;
&lt;li&gt;Manipulating arrays: indexing, slicing, transforming&lt;/li&gt;
&lt;li&gt;Understanding the difference between Numpy arrays and Python lists&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Plotting with Matplotlib
&lt;ul&gt;
&lt;li&gt;Line charts&lt;/li&gt;
&lt;li&gt;Histograms&lt;/li&gt;
&lt;li&gt;Bar charts&lt;/li&gt;
&lt;li&gt;Introduction to the Seaborn library for visualization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Management with Pandas
&lt;ul&gt;
&lt;li&gt;Summarizing data&lt;/li&gt;
&lt;li&gt;Cross tabluation&lt;/li&gt;
&lt;li&gt;Filtering and transforming data&lt;/li&gt;
&lt;li&gt;mutating&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Loops and Functions in Python
&lt;ul&gt;
&lt;li&gt;If-Else statements&lt;/li&gt;
&lt;li&gt;For and While loops&lt;/li&gt;
&lt;li&gt;Defining functions in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Details of the dates and times for the programs:
&lt;a href=&#34;https://pudasainimohan.com.np/talk/basic_data_analysis&#34;&gt;Click here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Registration form: Data analysis with Python</title>
      <link>https://pudasainimohan.com.np/courses/ds_basics/registration-form/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0100</pubDate>
      <guid>https://pudasainimohan.com.np/courses/ds_basics/registration-form/</guid>
      <description>&lt;!-- &lt;h2 style=&#34;text-align: center;&#34;&gt;Registration form: Data analysis with Python&lt;/h2&gt; --&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;Please fill out the following information to register for the course:&lt;/p&gt;
&lt;style&gt;
@import url(https://fonts.googleapis.com/css?family=Montserrat:400,700);

form { max-width:420px; margin:50px auto; }

.form-input {
color:black;

font-family: Helvetica, Arial, sans-serif;
font-weight:500;
font-size: 18px;
border-radius: 5px;
line-height: 22px;
background-color: transparent;
border:2px solid #CC6666;
transition: all 0.3s;
padding: 13px;
margin-bottom: 15px;
width:100%;
box-sizing: border-box;
outline:0;
}

.form-input:focus { border:2px solid #CC4949; }

textarea {
height: 150px;
line-height: 150%;
resize:vertical;
}

[type=&#34;submit&#34;] {
font-family: &#39;Montserrat&#39;, Arial, Helvetica, sans-serif;
width: 100%;
background:#CC6666;
border-radius:5px;
border:0;
cursor:pointer;
color:white;
font-size:24px;
padding-top:10px;
padding-bottom:10px;
transition: all 0.3s;
margin-top:-4px;
font-weight:700;
}
[type=&#34;submit&#34;]:hover { background:#CC4949; }
&lt;/style&gt;
&lt;form action=&#34;https://docs.google.com/forms/d/e/1FAIpQLSfGpTyHZVe725b_nlOWvxVE65KmHmrNuvR6RfK1UxjgX-zfnA/formResponse&#34; method=&#34;post&#34; target=&#34;hidden_iframe&#34; onsubmit=&#34;document.getElementById(&#39;submitBtn&#39;).disabled=true; submitted=true;&#34;&gt;
  &lt;label&gt;Name*&lt;/label&gt;
  &lt;input type=&#34;text&#34; placeholder=&#34;Name*&#34; class=&#34;form-input&#34; name=&#34;entry.2005620554&#34; required&gt;
&lt;p&gt;&lt;label&gt;Email*&lt;/label&gt;
&lt;input type=&#34;email&#34; placeholder=&#34;Email address*&#34; class=&#34;form-input&#34; name=&#34;entry.1045781291&#34; required&gt;&lt;/p&gt;
&lt;p&gt;&lt;label&gt;Organization*&lt;/label&gt;
&lt;input type=&#34;text&#34; placeholder=&#34;Organization*&#34; class=&#34;form-input&#34; name=&#34;entry.1065046570&#34; required&gt;&lt;/p&gt;
&lt;p&gt;&lt;label&gt;Designation*&lt;/label&gt;
&lt;input type=&#34;text&#34; placeholder=&#34;Designation*&#34; class=&#34;form-input&#34; name=&#34;entry.1937940652&#34; required&gt;&lt;/p&gt;
&lt;p&gt;&lt;label&gt;Mobile Number*&lt;/label&gt;
&lt;input type=&#34;text&#34; pattern=&#34;[0-9]{10}&#34; placeholder=&#34;Mobile Number*&#34; class=&#34;form-input&#34; name=&#34;entry.1166974658&#34; required&gt;&lt;/p&gt;
&lt;p&gt;&lt;label&gt;Do you have Prior knowledge on Python?*&lt;/label&gt;
&lt;select name=&#34;entry.1328943848&#34; class=&#34;form-input&#34; &gt;
&lt;option value=&#34;&#34; disabled selected&gt;Select an option&lt;/option&gt;
&lt;option value=&#34;Yes&#34;&gt;Yes&lt;/option&gt;
&lt;option value=&#34;No&#34;&gt;No&lt;/option&gt;
&lt;/select&gt;&lt;/p&gt;
&lt;p&gt;&lt;button type=&#34;submit&#34; id=&#34;submitBtn&#34;&gt;Submit&lt;/button&gt;&lt;/p&gt;
&lt;/form&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;Please wait a moment after clicking the submit button.&lt;/p&gt;
&lt;script type=&#34;text/javascript&#34;&gt;var submitted=false;&lt;/script&gt;
&lt;iframe name=&#34;hidden_iframe&#34; id=&#34;hidden_iframe&#34; style=&#34;display:none;&#34; 
onload=&#34;if(submitted) {window.location=&#39;/thankyou&#39;;}&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Online Workshop on Data Analysis with Python</title>
      <link>https://pudasainimohan.com.np/talk/basic_data_analysis/</link>
      <pubDate>Sun, 26 Feb 2023 20:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/talk/basic_data_analysis/</guid>
      <description>&lt;p&gt;          &lt;strong&gt;Fee&lt;/strong&gt;            Rs 2000 only&lt;/p&gt;
&lt;p&gt;          &lt;strong&gt;Syllabus&lt;/strong&gt;          
&lt;a href=&#34;https://pudasainimohan.com.np/courses/ds_basics/syllabus&#34;&gt;Click here&lt;/a&gt;&lt;/p&gt;
&lt;style&gt;
  .callout {
    background-color: #f8f8f8;
    border: 6px solid #ffa500;
    margin: 1em auto;
    padding: 0.3em 10px;
    text-align: center;
    border-width: 2px;
    font-size: 1.2em;
    display: block;
    font-weight: 1000;
    animation: blink 01.5s infinite;
  }
  
  .callout.note {
    border-color: #00bfff;
  }
  
  @keyframes blink {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
    100% {
      opacity: 1;
    }
  }
&lt;/style&gt;
&lt;div class=&#34;callout note&#34;&gt;
&lt;p&gt;
&lt;a href=&#34;https://pudasainimohan.com.np/courses/ds_basics/registration-form/&#34;&gt;To participate in the workshop, please click here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Python has become a critical tool for data scientists and analysts, offering a vast range of capabilities for analyzing and visualizing data. Whether you are a beginner or looking to enhance your existing skills in python, then this workshop is for you. This workshop is designed for individuals from a variety of backgrounds who have an interest in data analysis and visualization and want to learn the basics of Python programming without prior coding knowledge. The workshop is specifically targeted towards:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data Analysts/Data scientist:&lt;/strong&gt; Currently working with different software and looking to expand their skills by learning Python for data analysis.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Students:&lt;/strong&gt; Interested in starting a career in data analysis or data science and want to learn the basics of data analysis using Python.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Researchers and Scholars:&lt;/strong&gt; Who need to analyze data for their thesis, research projects, or academic papers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Educators and Teachers:&lt;/strong&gt; Who want to incorporate data analysis and visualization into their curriculum or learn Python as a tool for teaching data science.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Business Professionals:&lt;/strong&gt; Who need to analyze data for their work and want to learn a powerful and versatile programming language for data analysis.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By the end of the workshop, you will have a solid foundation in Python programming and the ability to use Python for various data analysis and visualization tasks. With hands-on experience using Jupyter Notebook and the various libraries used in the workshop, you will be ready to tackle real-world data analysis projects.
To view the full syllabus, please 
&lt;a href=&#34;https://pudasainimohan.com.np/courses/ds_basics/syllabus&#34;&gt;Click here&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t miss out on this opportunity to learn the most in-demand skills in the data analysis field. With a low fee, this comprehensive beginner&amp;rsquo;s workshop offers exceptional value for anyone looking to become a proficient Python data analyst. Enroll now to take your skills to the next level!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An Introduction to Tuples in Python</title>
      <link>https://pudasainimohan.com.np/post/intro_tuple/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/post/intro_tuple/</guid>
      <description>&lt;p&gt;In Python, a tuple is a data structure that is similar to a 
&lt;a href=&#34;../python_list&#34;&gt;list&lt;/a&gt;, but with a key difference: tuples are immutable. This means that once a tuple is created, its elements cannot be changed. Tuples are often used to store collections of related values that should not be modified, such as days of the week, or dates on a calendar. In this article, we will explore tuples in more detail, including how to construct them, some basic tuple methods. We will also discuss the concept of immutability, which is a fundamental feature of tuples that sets them apart from other data structures&lt;/p&gt;
&lt;h3 id=&#34;constructing-tuples&#34;&gt;Constructing Tuples&lt;/h3&gt;
&lt;p&gt;There are several ways to create a tuple. &lt;strong&gt;The most common way is to enclose a sequence of values in parentheses, separated by commas&lt;/strong&gt;. For example, you can create a tuple that stores the names of the months like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create a tuple
months = (&amp;quot;January&amp;quot;, &amp;quot;February&amp;quot;, &amp;quot;March&amp;quot;, &amp;quot;April&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;June&amp;quot;, &amp;quot;July&amp;quot;, &amp;quot;August&amp;quot;, &amp;quot;September&amp;quot;, &amp;quot;October&amp;quot;, &amp;quot;November&amp;quot;, &amp;quot;December&amp;quot;)
months
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(&#39;January&#39;,
 &#39;February&#39;,
 &#39;March&#39;,
 &#39;April&#39;,
 &#39;May&#39;,
 &#39;June&#39;,
 &#39;July&#39;,
 &#39;August&#39;,
 &#39;September&#39;,
 &#39;October&#39;,
 &#39;November&#39;,
 &#39;December&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also create a tuple using the built-in tuple() function, which takes an iterable (such as a list or another tuple) and converts it into a tuple. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [1, 2, 3]
my_tuple = tuple(my_list)
my_tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(1, 2, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have a tuple containing the months of the year, you can use len() to find out how many months are in the tuple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(months)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One of the benefits of tuples in Python is that they can contain elements of different types. For example, you can create a tuple that stores both integers and strings:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_tuple = (1, &amp;quot;hello&amp;quot;, 3.14)
my_tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(1, &#39;hello&#39;, 3.14)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indexing and slicing tuples is similar to indexing and slicing lists in Python. To access a single element of a tuple, you can use square brackets and the index of the element you want to access. In Python, indices start at 0, so the first element of a tuple has an index of 0, the second element has an index of 1, and so on. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;months[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;January&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;months[::2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(&#39;January&#39;, &#39;March&#39;, &#39;May&#39;, &#39;July&#39;, &#39;September&#39;, &#39;November&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;basic-tuple-methods&#34;&gt;Basic Tuple Methods&lt;/h3&gt;
&lt;p&gt;Tuples have built-in methods, but not as many as lists do. Let&amp;rsquo;s look at two of them:&lt;/p&gt;
&lt;p&gt;You can use the .index() method to find the index of a specific value in a tuple. If the value is found in the tuple, the method returns the index of the first occurrence of the value. If the value is not found, the method raises a ValueError&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;months.index(&amp;quot;January&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;months.index(&amp;quot;Nepal&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

Cell In[10], line 1
----&amp;gt; 1 months.index(&amp;quot;Nepal&amp;quot;)


ValueError: tuple.index(x): x not in tuple
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use the .count() method to count the number of times a specific value appears in a tuple. This method returns an integer that represents the number of occurrences of the value in the tuple. for example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t=(1,2,3,4,2,1,2,4)
t.count(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;immutability&#34;&gt;Immutability&lt;/h3&gt;
&lt;p&gt;Tuple can&amp;rsquo;t be stressed enough thay are immutable. To drive that point home, let&amp;rsquo;s take an example and try to replace  &amp;ldquo;january&amp;rdquo; by &amp;ldquo;Jan&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;months[0]= &#39;Jan&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

Cell In[13], line 1
----&amp;gt; 1 months[0]= &#39;Jan&#39;


TypeError: &#39;tuple&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because of this immutability, tuples can&amp;rsquo;t grow. Once a tuple is made we can not add to it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;months.append(&#39;Baishakh&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

AttributeError                            Traceback (most recent call last)

Cell In[14], line 1
----&amp;gt; 1 months.append(&#39;Baishakh&#39;)


AttributeError: &#39;tuple&#39; object has no attribute &#39;append&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In summary, Tuples are immutable data structures in Python, similar to lists but with key differences. They can be constructed using parentheses, and can contain multiple data types. Tuples support basic methods like indexing, slicing, counting, and returning the length of the tuple. The immutability of tuples makes them useful for representing constant values, while their compact size and faster processing speed make them a good choice for certain types of data.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python Dictionaries: Key-Value Pair Mapping</title>
      <link>https://pudasainimohan.com.np/post/python_dictionary/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/post/python_dictionary/</guid>
      <description>&lt;p&gt;Python dictionaries provide a powerful way to store and organize data as key-value pairs, which is known as mapping. Unlike sequences that store objects by their relative position, mappings use a unique key to store objects. This key-based approach makes Python dictionaries incredibly versatile and suitable for representing a wide range of real-world scenarios. It&amp;rsquo;s important to note that since mappings are not defined by order, Python dictionaries won&amp;rsquo;t retain the order of objects. In this article, we&amp;rsquo;ll delve into the basics of Python dictionaries, including how to construct a dictionary, access objects within it, create nested dictionaries, and use some of the basic dictionary methods.&lt;/p&gt;
&lt;h3 id=&#34;constructing-a-dictionary&#34;&gt;Constructing a Dictionary&lt;/h3&gt;
&lt;p&gt;In Python, you can construct a dictionary using a set of key-value pairs enclosed in curly braces {}. Each key-value pair is separated by a colon, and the pairs are separated by commas. Here&amp;rsquo;s an example of a simple dictionary&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fruit = {&#39;apple&#39;: 2, &#39;banana&#39;: 3, &#39;orange&#39;: 5}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the keys are strings (&amp;lsquo;apple&amp;rsquo;, &amp;lsquo;banana&amp;rsquo;, &amp;lsquo;orange&amp;rsquo;) and the values are integers (2, 3, 5). You can access the values in the dictionary by using the keys as indices. For example, fruit[&amp;lsquo;apple&amp;rsquo;] would return the value 2.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fruit[&#39;apple&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Its important to note that dictionaries are very flexible in the data types they can hold. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fruit = {&#39;name&#39;: &#39;apple&#39;,&#39;color&#39;: &#39;red&#39;,&#39;vitamins&#39;: [&#39;A&#39;, &#39;C&#39;]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here Vitamin contains the list and to access the value associated with a particular key in a dictionary, you can use square bracket notation with the key inside the brackets. For example, to access the value associated with the &amp;lsquo;vitamins&amp;rsquo; key in the &amp;lsquo;fruit&amp;rsquo; dictionary, you can use the following code: fruit[&amp;lsquo;vitamins&amp;rsquo;]&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fruit[&#39;vitamins&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;A&#39;, &#39;C&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will return the value associated with the &amp;lsquo;vitamins&amp;rsquo; key, which in this case is the list [&amp;lsquo;A&amp;rsquo;, &amp;lsquo;C&amp;rsquo;].Once you have the list, you can perform various operations on it. For example, you can access individual elements in the list using their index, like this: fruit[&amp;lsquo;vitamins&amp;rsquo;][0]. This would return the string &amp;lsquo;A&amp;rsquo;, which is the first item in the list.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fruit[&#39;vitamins&#39;][0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;A&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you can also call methods on that value, for example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
fruit[&#39;vitamins&#39;][0].lower()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;a&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would return the string &amp;lsquo;a&amp;rsquo;, since the lower() method converts the string &amp;lsquo;A&amp;rsquo; to lowercase.&lt;/p&gt;
&lt;p&gt;you can modifiy the element of the dictionary. for example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
fruit[&#39;vitamins&#39;].append(&#39;B&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
fruit
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;name&#39;: &#39;apple&#39;, &#39;color&#39;: &#39;red&#39;, &#39;vitamins&#39;: [&#39;A&#39;, &#39;C&#39;, &#39;B&#39;]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here, new element &amp;lsquo;B&amp;rsquo; to the vitamins has been added.&lt;/p&gt;
&lt;p&gt;We can also create keys by assignment. For instance if we started off with an empty dictionary, we could continually add to it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Create a new dictionary
d = {}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Create a new key through assignment
d[&#39;animal&#39;] = &#39;Dog&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Can do this with any object
d[&#39;answer&#39;] = 42
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;animal&#39;: &#39;Dog&#39;, &#39;answer&#39;: 42}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;nesting-with-dictionaries&#34;&gt;Nesting with Dictionaries&lt;/h3&gt;
&lt;p&gt;By now, you might be realizing how flexible and powerful Python is, especially when it comes to nesting objects and calling methods on them. To further illustrate this, consider the following example of a dictionary nested inside another dictionary&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt; Dictionary nested inside a dictionary nested inside a dictionary
d = {&#39;key1&#39;:{&#39;nestkey&#39;:{&#39;subnestkey&#39;:&#39;value&#39;}}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wow! That&amp;rsquo;s a quite the inception of dictionaries! Let&amp;rsquo;s see how we can grab that value:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Keep calling the keys
d[&#39;key1&#39;][&#39;nestkey&#39;][&#39;subnestkey&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;value&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;a-few-dictionary-methods&#34;&gt;A few Dictionary Methods&lt;/h3&gt;
&lt;p&gt;There are a few methods we can call on a dictionary. Let&amp;rsquo;s get a quick introduction to a few of them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Create a typical dictionary
d = {&#39;key1&#39;:1,&#39;key2&#39;:2,&#39;key3&#39;:3}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Method to return a list of all keys 
d.keys()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_keys([&#39;key1&#39;, &#39;key2&#39;, &#39;key3&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Method to grab all values
d.values()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_values([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;items() emthod  return tuples of all items  , we will discuss about tuple in next article.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d.items()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_items([(&#39;key1&#39;, 1), (&#39;key2&#39;, 2), (&#39;key3&#39;, 3)])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In summary, dictionaries in Python are a powerful and flexible data structure that allow you to store and organize data in key-value pairs. Dictionaries are unordered collections of objects, where each object is identified by a unique key. They are mutable, which means you can modify their contents by adding, removing, or updating key-value pairs. Additionally, the keys in a dictionary are unique, which means you cannot have multiple entries with the same key.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with Lists in Python</title>
      <link>https://pudasainimohan.com.np/post/python_list/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/post/python_list/</guid>
      <description>&lt;p&gt;A list in Python is a collection of items, which can be of any data type, including numbers, strings, and other objects. Lists are defined using square brackets [] and the items are separated by commas. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fruits = [&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;]
numbers = [1, 2, 3, 4, 5]
my_list = [&#39;Ram&#39;,23,100.232,&#39;Book&#39;,True]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like strings, the &lt;code&gt;len() &lt;/code&gt; function will tell you how many items are in the sequence of the list.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(my_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;indexing-and-slicing&#34;&gt;Indexing and Slicing&lt;/h3&gt;
&lt;p&gt;Indexing and slicing are two important concepts in Python when it comes to working with lists.&lt;/p&gt;
&lt;p&gt;Indexing refers to accessing individual elements of a list. The elements of a list are stored in a specific order and can be retrieved using their index, which is an integer that starts from 0. For example, consider the following list&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [&#39;Ram&#39;,23,100.232,&#39;Book&#39;,True]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can access the first element of the list using the following syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
my_list[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Ram&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Slicing, on the other hand, allows you to retrieve a portion of the list. The syntax for slicing is &lt;code&gt; list[start:stop:step] &lt;/code&gt;, where start is the starting index (inclusive), stop is the ending index (exclusive), and step is the increment between elements.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example of slicing a list:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[1:]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Ram&#39;, 100.232, True]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here, The expression &lt;code&gt;my_list[1:] &lt;/code&gt; is a slice of the list that starts from the index 1 and goes until the end of the list. In other words, it returns all the elements of the list except for the first one&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[::2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Ram&#39;, 100.232, True]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The expression &lt;code&gt;my_list[::2] &lt;/code&gt; is a slice of the list that starts from the first element (index 0) and goes until the end of the list, taking steps of 2. In other words, it returns every other element of the list, starting from the first one&lt;/p&gt;
&lt;h3 id=&#34;concatinating-list&#34;&gt;Concatinating list&lt;/h3&gt;
&lt;p&gt;You can concatenate two or more lists using the + operator. The + operator creates a new list that is the combination of the elements from the original lists.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list + [&#39;new item&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Ram&#39;, 23, 100.232, &#39;Book&#39;, True, &#39;new item&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: This doesn&amp;rsquo;t actually change the original list!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Ram&#39;, 23, 100.232, &#39;Book&#39;, True]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You would have to reassign the list to make the change permanent.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
my_list = my_list + [&#39;new1&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Ram&#39;, 23, 100.232, &#39;Book&#39;, True, &#39;new1&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The&lt;code&gt; * &lt;/code&gt; operator can  be utilized for duplication, similar to strings,for example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
my_list * 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Ram&#39;,
 23,
 100.232,
 &#39;Book&#39;,
 True,
 &#39;add new item permanently&#39;,
 &#39;Ram&#39;,
 23,
 100.232,
 &#39;Book&#39;,
 True,
 &#39;add new item permanently&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;basic-list-methods&#34;&gt;Basic List Methods&lt;/h3&gt;
&lt;p&gt;There are several built-in methods in Python that you can use to manipulate lists. Here are some of the most commonly used methods.
&lt;strong&gt;append(element)&lt;/strong&gt; - Adds an element to the end of the list&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [1,2,3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.append(4)
print(list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;insert(index, element)&lt;/strong&gt; - Inserts an element at a specific position in the list&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.insert(0,&amp;quot;First&amp;quot;)
print(my_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;First&#39;, 1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;remove(element)&lt;/strong&gt; - Removes the first occurrence of an element from the list.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.remove(&amp;quot;First&amp;quot;)
print(list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;pop(index)&lt;/strong&gt; - Removes the element at a specific position in the list and returns it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.pop(0)
print(my_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;sort()&lt;/strong&gt; - Sorts the elements of the list in ascending order.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.sort(reverse=True)
print(my_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[4, 3, 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;reverse()&lt;/strong&gt; - Reverses the order of the elements in the list&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.reverse()
print(my_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;extend(list)&lt;/strong&gt; - Adds the elements of one list to the end of another list.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list1 =[&amp;quot;Book&amp;quot;,&amp;quot;Copy&amp;quot;]
my_list.append(my_list1)
print(my_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[2, 3, 4, [&#39;Book&#39;, &#39;Copy&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.extend(my_list1)
print(my_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[2, 3, 4, [&#39;Book&#39;, &#39;Copy&#39;],  &#39;Book&#39;, &#39;Copy&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The difference between extend() and append() is that the extend method modifies the original list my_list, adding the elements of my_list1 to the end of it. On the other hand, the append() methods creates a new list that contains the elements of both my_list and my_list1.&lt;/p&gt;
&lt;h3 id=&#34;nesting-lists&#34;&gt;Nesting Lists&lt;/h3&gt;
&lt;p&gt;The term &amp;ldquo;nesting lists&amp;rdquo; refers to creating a list that contains other lists as its elements. This can be useful when you want to group related items together&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see how this works!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Let&#39;s make three lists
lst_1=[1,2,3]
lst_2=[4,5,6]
lst_3=[7,8,9]

Make a list of lists to form a combined_list
combined_list = [lst_1,lst_2,lst_3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;combined_list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can again use indexing to access elements, but now there are two levels for the index. The items in the combined_list object, and then the items inside that list!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;access first item in combined_list object
combined_list[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;access first item of the first item in the combined_list object
matrix[0][0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>String Formatting in Python</title>
      <link>https://pudasainimohan.com.np/post/string_formating/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/post/string_formating/</guid>
      <description>&lt;p&gt;String formatting is a technique used to combine an existing string with other values to create a new string. This process is important in many programming languages, including Python, as it enables developers to create dynamic strings that can change based on different inputs. In data science, string formatting is particularly useful as it allows data scientists to present results in a clear and readable format, streamline their workflows, and effectively communicate their findings. With string formatting, data scientists can process, analyze, and visualize large amounts of data with ease. In this article, we will provide a comprehensive overview of string formatting in Python and explore the various methods available to help you get started with this important technique.&lt;/p&gt;
&lt;p&gt;There are three ways to perform string formatting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Placeholder Method using % character&lt;/li&gt;
&lt;li&gt;.format() Method&lt;/li&gt;
&lt;li&gt;f-strings Method&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;formatting-with-placeholders&#34;&gt;Formatting with placeholders&lt;/h3&gt;
&lt;p&gt;In Python, there are several placeholders that can be utilized for string formatting purposes. These placeholders include &lt;code&gt; %s, %r, and %d&lt;/code&gt;.
lets&amp;rsquo; look some example of each placeholder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;I&#39;m going to insert %s into the code.&amp;quot; %&#39;new text&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;I&#39;m going to insert new text into the code.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example,  The string &amp;ldquo;I&amp;rsquo;m going to insert &lt;code&gt;%s&lt;/code&gt; into the code.&amp;rdquo; serves as a template and includes a placeholder, represented by the &lt;code&gt;%s&lt;/code&gt;. This placeholder indicates where a value should be inserted into the string.&lt;/p&gt;
&lt;p&gt;The value that is inserted into the string is &amp;rsquo;new text&amp;rsquo;, which is specified after the &lt;code&gt;%&lt;/code&gt; operator. When the code is executed, the output is the string &amp;ldquo;I&amp;rsquo;m going to insert new text into the code.&amp;rdquo;, which shows how the value of &amp;rsquo;new text&amp;rsquo; has been incorporated into the template string.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;I&#39;m going to insert %s information here, and %s data here.&amp;quot; %(&#39;critical&#39;,&#39;additional&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;I&#39;m going to insert critical information here, and additional data here.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the placeholders %s are used to dynamically insert the values &amp;lsquo;critical&amp;rsquo; and &amp;lsquo;additional&amp;rsquo; into the string. The % operator is followed by a tuple of values that are inserted into the corresponding placeholders in the string.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a, b = &#39;important&#39;, &#39;updated&#39;
print(&amp;quot;I&#39;m going to insert %s information here, and %s data here.&amp;quot; %(a,b))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;I&#39;m going to insert important information here, and updated data here.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here, the variables a and b are assigned the values &amp;lsquo;important&amp;rsquo; and &amp;lsquo;updated&amp;rsquo; respectively. These variables are then used in the string formatting expression to insert the values into the corresponding placeholders in the string. This demonstrates that the values assigned to the variables can be changed easily, making the output dynamic and flexible.&lt;/p&gt;
&lt;p&gt;It should be noted that two methods &lt;code&gt;%s&lt;/code&gt; and &lt;code&gt;%r&lt;/code&gt; convert any python object to a string using two separate methods: &lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt;. We will learn more about these functions on upcomming posts, but you should note that &lt;code&gt;%r&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt; deliver the &lt;em&gt;string representation&lt;/em&gt; of the object, including quotation marks and any escape characters. for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;My name is  %s.&#39; %&#39;Mohan&#39;)
print(&#39;My name is  %r.&#39; %&#39;Mohan&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;My name is  Mohan.
My name is  &#39;Mohan&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the string &amp;lsquo;Mohan&amp;rsquo; is being inserted into the sentence &amp;lsquo;My name is %s.&amp;rsquo; and &amp;lsquo;My name is %r.&amp;rsquo; using string formatting.&lt;/p&gt;
&lt;p&gt;The %s placeholder is a placeholder for a string, and the % symbol followed by &amp;lsquo;Mohan&amp;rsquo; in parentheses is used to replace the %s placeholder with the string &amp;lsquo;Mohan&amp;rsquo;. similarly, The %r placeholder is a placeholder for a string representation of an object, which can be useful for debugging purposes. In this case, the string representation of the string &amp;lsquo;Mohan&amp;rsquo; is &amp;lsquo;Mohan&amp;rsquo;, so the %r placeholder is replaced with &amp;lsquo;Mohan&amp;rsquo;. let&amp;rsquo;s look another example of %r and %s&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;words = &#39;catch\nand\nrelease&#39;

print(&#39;Remember to %s.&#39; % (&#39;catch\nand\nrelease&#39;))
print(&#39;Remember to %r.&#39; % (&#39;catch\nand\nrelease&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Remember to catch
and
release.
Remember to &#39;catch\nand\nrelease&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here, first line&amp;rsquo;s result comes in three lines and the second line&amp;rsquo;s result comes in one line is due to the difference between &lt;code&gt;%s and %r&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;%s is used to insert a string representation of an object into a string, which means that any newline characters (\n) in the string representation will be displayed as separate lines in the output.&lt;/p&gt;
&lt;p&gt;On the other hand,&lt;code&gt; %r &lt;/code&gt; is used to insert a raw, string representation of an object into a string, which includes any escape sequences such as newline characters.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;%s&lt;/code&gt; operator converts whatever it sees into a string, including integers and floats. The &lt;code&gt;%d&lt;/code&gt; operator converts numbers to integers first, without rounding. Note the difference below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;I wrote %s programs today.&#39; %3.75)
print(&#39;I wrote %d programs today.&#39; %3.75)   
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;I wrote 3.75 programs today.
I wrote 3 programs today.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;padding-and-precision-of-floating-point-numbers&#34;&gt;Padding and Precision of Floating Point Numbers&lt;/h3&gt;
&lt;p&gt;In Python, you can control the display of floating-point numbers by using the % operator in combination with placeholder specifications. These placeholder specifications allow you to specify the number of decimal places to display, as well as the width of the output field.
To control the precision of floating-point numbers, you can use the . character followed by the number of decimal places you want to display&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Floating point numbers: %5.2f&#39; %(13.144))

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Floating point numbers: 13.14
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Floating point numbers use the format &lt;code&gt;%5.2f&lt;/code&gt;. Here, &lt;code&gt;5&lt;/code&gt; would be the minimum number of characters the string should contain; these may be padded with whitespace if the entire number does not have this many digits. Next to this, &lt;code&gt;.2f&lt;/code&gt; stands for two digits to show past the decimal point.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Floating point numbers: %.0f&#39; %(1300.144))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Floating point numbers: 1300
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;formatting-with-the-format-method&#34;&gt;Formatting with the &lt;code&gt;.format()&lt;/code&gt; method&lt;/h3&gt;
&lt;p&gt;A better way to format objects into your strings for print statements is with the string &lt;code&gt;.format()&lt;/code&gt; method. The syntax is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39;String here {} then also {}&#39;.format(&#39;something1&#39;,&#39;something2&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;This is a string with an {}&#39;.format(&#39;insert&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;This is a string with an insert
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;the-format-method-has-several-advantages-over-the-s-placeholder-method&#34;&gt;The .format() method has several advantages over the %s placeholder method:&lt;/h3&gt;
&lt;h5 id=&#34;1-inserted-objects-can-be-called-by-index-position&#34;&gt;1. Inserted objects can be called by index position:&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;The {2} {1} {0}&#39;.format(&#39;fox&#39;,&#39;brown&#39;,&#39;quick&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;The quick brown fox
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-inserted-objects-can-be-assigned-keywords&#34;&gt;2. Inserted objects can be assigned keywords:&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;First Object: {a}, Second Object: {b}, Third Object: {c}&#39;.format(a=1,b=&#39;Two&#39;,c=12.3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;First Object: 1, Second Object: Two, Third Object: 12.3
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-inserted-objects-can-be-reused-avoiding-duplication&#34;&gt;3. Inserted objects can be reused, avoiding duplication:&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
print(&#39;I %s you more every day, and my %s for you will never fade.&#39; %(&#39;love&#39;,&#39;love&#39;))
#Vs
print(&#39;I {w} you more every day, and my {w} for you will never fade.&#39;.format(w=&#39;love&#39;))

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;I love you more every day, and my love for you will never fade.
I love you more every day, and my love for you will never fade.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;alignment-padding-and-precision-with-format&#34;&gt;Alignment, padding and precision with &lt;code&gt;.format()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Within the curly braces you can assign field lengths, left/right alignments, rounding parameters and more&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;{0:8} | {1:9}&#39;.format(&#39;Fruit&#39;, &#39;Quantity&#39;))
print(&#39;{0:8} | {1:20}&#39;.format(&#39;Apples&#39;, 3.))
print(&#39;{0:8} | {1:9}&#39;.format(&#39;Oranges&#39;, 10))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Fruit    | Quantity 
Apples   |                  3.0
Oranges  |        10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, &lt;code&gt;.format()&lt;/code&gt; aligns text to the left, numbers to the right. You can pass an optional &lt;code&gt;&amp;lt;&lt;/code&gt;,&lt;code&gt;^&lt;/code&gt;, or &lt;code&gt;&amp;gt;&lt;/code&gt; to set a left, center or right alignment:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;{0:&amp;lt;8} | {1:^8} | {2:&amp;gt;8}&#39;.format(&#39;Left&#39;,&#39;Center&#39;,&#39;Right&#39;))
print(&#39;{0:&amp;lt;8} | {1:^8} | {2:&amp;gt;8}&#39;.format(11,22,33))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Left     |  Center  |    Right
11       |    22    |       33
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can precede the aligment operator with a padding character&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;{0:=&amp;lt;8} | {1:-^8} | {2:.&amp;gt;8}&#39;.format(&#39;Left&#39;,&#39;Center&#39;,&#39;Right&#39;))
print(&#39;{0:=&amp;lt;8} | {1:-^8} | {2:.&amp;gt;8}&#39;.format(11,22,33))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Left==== | -Center- | ...Right
11====== | ---22--- | ......33
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Field widths and float precision are handled in a way similar to placeholders. The following two print statements are equivalent:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;This is my ten-character, two-decimal number:%10.2f&#39; %13.579)
print(&#39;This is my ten-character, two-decimal number:{0:10.2f}&#39;.format(13.579))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;This is my ten-character, two-decimal number:     13.58
This is my ten-character, two-decimal number:     13.58
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that there are 5 spaces following the colon, and 5 characters taken up by 13.58, for a total of ten characters.&lt;/p&gt;
&lt;h3 id=&#34;formatted-string-literals-f-strings&#34;&gt;Formatted String Literals (f-strings)&lt;/h3&gt;
&lt;p&gt;Introduced in Python 3.6, f-strings offer several benefits over the older &lt;code&gt;.format()&lt;/code&gt; string method described above. For one, you can bring outside variables immediately into to the string rather than pass them as arguments through &lt;code&gt;.format(var)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name = &#39;Fred&#39;

print(f&amp;quot;He said his name is {name}.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;He said his name is Fred.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pass &lt;code&gt;!r&lt;/code&gt; to get the string representation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&amp;quot;He said his name is {name!r}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;He said his name is &#39;Fred&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;float-formatting-follows-result-valuewidthprecision&#34;&gt;Float formatting follows &lt;code&gt;&amp;quot;result: {value:{width}.{precision}}&amp;quot;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Where with the &lt;code&gt;.format()&lt;/code&gt; method you might see &lt;code&gt;{value:10.4f}&lt;/code&gt;, with f-strings this can become &lt;code&gt;{value:{10}.{6}}&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;num = 23.45678
print(&amp;quot;My 10 character, four decimal number is:{0:10.4f}&amp;quot;.format(num))
print(f&amp;quot;My 10 character, four decimal number is:{num:{10}.{3}}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;My 10 character, four decimal number is:   23.4568
My 10 character, four decimal number is:      23.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that with f-strings, &lt;em&gt;precision&lt;/em&gt; refers to the total number of digits, not just those following the decimal. This fits more closely with scientific notation and statistical analysis. Unfortunately, f-strings do not pad to the right of the decimal, even if precision allows it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;num = 23.45
print(&amp;quot;My 10 character, four decimal number is:{0:10.4f}&amp;quot;.format(num))
print(f&amp;quot;My 10 character, four decimal number is:{num:{10}.{6}}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;My 10 character, four decimal number is:   23.4500
My 10 character, four decimal number is:     23.45
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If this becomes important, you can always use &lt;code&gt;.format()&lt;/code&gt; method syntax inside an f-string:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;num = 23.45
print(&amp;quot;My 10 character, four decimal number is:{0:10.4f}&amp;quot;.format(num))
print(f&amp;quot;My 10 character, four decimal number is:{num:10.4f}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;My 10 character, four decimal number is:   23.4500
My 10 character, four decimal number is:   23.4500
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>An Introduction to Strings in Python</title>
      <link>https://pudasainimohan.com.np/post/string_basic/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/post/string_basic/</guid>
      <description>&lt;p&gt;In Python, strings are a vital data type that play a significant role in storing text information, such as names, addresses, and other textual data. Strings are viewed as a series of characters, each with a unique position or index in the sequence. This allows us to easily access individual characters within a string using indexing.&lt;/p&gt;
&lt;p&gt;For instance, the string &amp;ldquo;Nepal&amp;rdquo; is considered a sequence of five letters (&amp;lsquo;N&amp;rsquo;, &amp;rsquo;e&amp;rsquo;, &amp;lsquo;p&amp;rsquo;, &amp;lsquo;a&amp;rsquo;, &amp;rsquo;l&amp;rsquo;) arranged in a specific order. With the help of indexing, we can extract individual letters from the string, such as the first letter &amp;lsquo;N&amp;rsquo; or the last letter &amp;rsquo;l&amp;rsquo;. This property of strings as sequences in Python makes them extremely versatile and useful for a variety of applications, including text processing and manipulation.&lt;/p&gt;
&lt;p&gt;In this article, we will explore the creation, indexing, formatting, and various properties of strings in Python.&lt;/p&gt;
&lt;h3 id=&#34;creating-a-string&#34;&gt;Creating a String&lt;/h3&gt;
&lt;p&gt;To create a string in Python you need to use either single quotes or double quotes. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Nepal&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Nepal&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;We can also use double quote
&amp;quot;Buddha was born in Nepal&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Buddha was born in Nepal&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39; I&#39;m passionate about data science&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  File &amp;quot;&amp;lt;ipython-input-4-da9a34b3dc31&amp;gt;&amp;quot;, line 2
    &#39; I&#39;m passionate about data science&#39;
        ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;** error?**&lt;/p&gt;
&lt;p&gt;The reason for the error above is because the single quote in &lt;code&gt;I&amp;rsquo;m&lt;/code&gt; stopped the string. You can use combinations of double and single quotes to get the complete statement or use backslash(\).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;I&#39;m passionate about data science&amp;quot;
&#39;I\&#39;m passionate about data science&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;I&#39;m passionate about data science&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;printing-a-string&#34;&gt;Printing a String&lt;/h3&gt;
&lt;p&gt;The example above only displays one output despite having two lines of input. Is your assumption that it&amp;rsquo;s due to the identical sentences ? It&amp;rsquo;s important to note that simply entering a string in a Jupyter notebook cell will result in automatic output, but to display multiple strings properly, the &lt;strong&gt;print&lt;/strong&gt; function should be utilized. to show both line we can do as follow&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;I&#39;m passionate about data science&amp;quot;)
print(&#39;I\&#39;m passionate about data science&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;I&#39;m passionate about data science
I&#39;m passionate about data science
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use a print statement to print a string. here are some examples and their outputs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Hello World 1&#39;)
print(&#39;Hello World 2&#39;)
print(&#39;Use \n to print a new line&#39;)
print(&#39;\n&#39;)
print(&#39;See what I mean?&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Hello World 1
Hello World 2
Use 
 to print a new line


See what I mean?
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;string-length&#34;&gt;String length&lt;/h3&gt;
&lt;p&gt;In Python, you can find the length of a string using the len function. The len function returns the number of characters in a string. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(&#39;Hello World&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;string-indexing&#34;&gt;String Indexing&lt;/h3&gt;
&lt;p&gt;string indexing is a process of accessing individual characters in a string using an index. The index of a character in a string starts from 0, and the last character in a string has an index of len(string) - 1. You can access a character at a specific index in a string using square brackets &lt;code&gt;[]&lt;/code&gt;. Let&amp;rsquo;s learn how this works.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Assign s as string and print it
s = &#39;Hello World&#39;
Print(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Hello World&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Show first element (in this case a letter)
s[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;H&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;e&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use a &lt;code&gt;:&lt;/code&gt; to perform &lt;em&gt;slicing&lt;/em&gt; which grabs everything up to a designated point. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s[1:]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;ello World&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here, [1:] is a slice of the string that starts from the second character (index 1) and goes to the end of the string.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s[:3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Hel&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, we tell Python to extract the characters from the first position (index 0) until the fourth position (index 3), but not including the character at the fourth position. This concept of &amp;ldquo;up to but not including&amp;rdquo; is a common occurrence in Python, and can be seen frequently in various statements and contexts.
We can also use negative indexing to go backwards.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s[-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;d&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can extract elements from a sequence by using index and slice notation, where the step size  can be specified. To do so, we can use two colons followed by a number that represents the frequency of extraction. For example, to retrieve all elements with a step size of 2, we can use the following syntax.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s[::2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;HloWrd&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similary, We can use this to print a string backwards too&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s[::-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;dlroW olleH&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;string-properties&#34;&gt;String Properties&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s important to note that strings have an important property known as &lt;em&gt;immutability&lt;/em&gt;. This means that once a string is created, the elements within it can not be changed or replaced. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Hello World&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s try to change the first letter to &amp;lsquo;x&amp;rsquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
s[0] = &#39;x&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-26-976942677f11&amp;gt; in &amp;lt;module&amp;gt;()
      1 # Let&#39;s try to change the first letter to &#39;x&#39;
----&amp;gt; 2 s[0] = &#39;x&#39;


TypeError: &#39;str&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how the error tells us directly what we can&amp;rsquo;t do, change the item assignment!&lt;/p&gt;
&lt;p&gt;Something we &lt;em&gt;can&lt;/em&gt; do is concatenate strings!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s= s + &#39; concatenate me!&#39;
print(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Hello World concatenate me!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we can use the multiplication operator to achieve repetition of elements.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;letter = &#39;z&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;letter*10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;zzzzzzzzzz&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;basic-built-in-string-methods&#34;&gt;Basic Built-in String methods&lt;/h3&gt;
&lt;p&gt;Python objects often have pre-defined methods that come as part of the object. These methods, which are essentially functions within the object, can perform various operations on the object itself. To access these methods, we use the dot notation, followed by the method name. The general syntax for using methods is as follows:&lt;/p&gt;
&lt;p&gt;object.method(arguments)&lt;/p&gt;
&lt;p&gt;Where the arguments are optional parameters that can be passed to the method. If some parts of this explanation are not clear at this moment, don&amp;rsquo;t worry, we will delve into it further when we start creating our own objects and functions.&lt;/p&gt;
&lt;p&gt;Below are a few examples of built-in methods for strings:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Hello World concatenate me!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To change to uppercase:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
s.upper()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;HELLO WORLD CONCATENATE ME!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To change to lowercase:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s.lower()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;hello world concatenate me!&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Split a string by blank space (this is the default):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
s.split()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Hello&#39;, &#39;World&#39;, &#39;concatenate&#39;, &#39;me!&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Split by a specific element (doesn&amp;rsquo;t include the element that was split on)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
s.split(&#39;W&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Hello &#39;, &#39;orld concatenate me!&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are many more methods than the ones covered here. we will cover it on future posts&lt;/p&gt;
&lt;h3 id=&#34;print-formatting&#34;&gt;Print Formatting&lt;/h3&gt;
&lt;p&gt;We can use the .format() method to add formatted objects to printed string statements.&lt;/p&gt;
&lt;p&gt;The easiest way to show this is through an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Insert another string with curly brackets: {}&#39;.format(&#39;The inserted string&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;Insert another string with curly brackets: The inserted string&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will discuss other options for print formatting in future articles.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Numbers and airthmetic Operators in Python</title>
      <link>https://pudasainimohan.com.np/post/arithmetic_python/</link>
      <pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/post/arithmetic_python/</guid>
      <description>&lt;p&gt;Python offers a range of numeric data types, including integers, floating-point numbers, and complex numbers. In this article, our main focus will be on integers and floating-point numbers. Integers are whole numbers that can be either positive or negative, for instance 7 or -10. Floating-point numbers, on the other hand, have decimal components or use exponential (e) notation, such as 2.0, -2.1, or 4e2.&lt;/p&gt;
&lt;p&gt;Here is a table of the two main types we will spend most of our time working with some examples:&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
    &lt;th&gt;Examples&lt;/th&gt; 
    &lt;th&gt;Number &#34;Type&#34;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;1,2,-5,1000&lt;/td&gt;
    &lt;td&gt;Integers&lt;/td&gt; 
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;1.2,-0.5,2e2,3E2&lt;/td&gt; 
    &lt;td&gt;Floating-point numbers&lt;/td&gt; 
&lt;/tr&gt;
 &lt;/table&gt;
&lt;p&gt;Now let&amp;rsquo;s start with some basic arithmetic.&lt;/p&gt;
&lt;h3 id=&#34;basic-arithmetic&#34;&gt;Basic Arithmetic&lt;/h3&gt;
&lt;p&gt;Python provides several built-in arithmetic operators for basic calculations, including: addition (+), subtraction (-), multiplication (*), division (/), and modulo division (%). Additionally, it provides the exponentiation operator (**) which computes the power of a number and the floor division operator (//) which returns the integer quotient of division.
Here are some examples of each of these operators:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Addition
7+4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Subtraction
7-4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Multiplication
7*4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;28
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Division
7/4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1.75
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Floor Division:
7//4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unexpected result from 7 divided by 4 equals 1, not 1.75. This is because of the use of floor division (// operator). It returns the integer result by truncating the decimal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What if we just need the remainder?&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;7%4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4 goes into 7 once, with a remainder of 3. The % operator returns the remainder after division.
let&amp;rsquo;s continue with some other operators.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Exponential
2**3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The expression 2**3 in Python calculates 2 raised to the power of 3, which equals 8. The ** operator is used for exponentiation in Python. similary we can use power 0.05 to calculate the square root.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;4**0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;variable-assignments&#34;&gt;Variable Assignments&lt;/h3&gt;
&lt;p&gt;With a basic understanding of numbers in Python, let&amp;rsquo;s move on to assigning labels to values through the use of variables. To create a variable, you simply use a single equals sign (=) followed by the value you want to assign. Let&amp;rsquo;s explore a few examples to illustrate this process.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have created an object with a value of 10. If we reference the object, designated as a, within our Python script, Python will recognize it as the number 10&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a+a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens on reassignment? Will Python let us write it over?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 15
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;let&amp;rsquo;s check&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;15
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python lets you reassign variables with a reference to the same object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a=a+15
a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;30
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&amp;rsquo;s actually a shortcut for this. Python lets you add, subtract, multiply and divide numbers with reassignment using &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, and &lt;code&gt;/=&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a += 15
a
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;45
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes! Python allows you to write over assigned variable names. We can also use the variables themselves when doing the reassignment.&lt;/p&gt;
&lt;p&gt;When creating variables or objects in Python, certain guidelines must be followed to ensure their names are valid. This includes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Starting the name with a letter, not a number.&lt;/li&gt;
&lt;li&gt;Utilizing underscores(_) instead of spaces.&lt;/li&gt;
&lt;li&gt;Avoiding special characters like &amp;lsquo;&amp;rsquo;, &amp;ldquo;, &amp;lt;, &amp;gt;, /, ?, |, , (, ), !, @, #, $, %, ^, &amp;amp;, *, ~, -, and +.&lt;/li&gt;
&lt;li&gt;Keeping names in lowercase, as recommended by PEP8.&lt;/li&gt;
&lt;li&gt;Steering clear of single letter names such as l, O, and I which can be easily misconstrued.&lt;/li&gt;
&lt;li&gt;Refraining from using words that hold special meaning in Python, for instance, &amp;ldquo;list&amp;rdquo; or &amp;ldquo;str&amp;rdquo;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Assigning values to variables in Python can greatly aid in organizing and tracking the data in your code. Here&amp;rsquo;s an example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_salary = 50000

tax_rate = 0.13

total_tax = my_income*tax_rate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By accessing the total_tax variable, we can easily calculate the tax amount:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;total_tax
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;6500.0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Work on Jupyter Notebook:Shortcut Keys</title>
      <link>https://pudasainimohan.com.np/post/jupyter_start/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/post/jupyter_start/</guid>
      <description>&lt;p&gt;Once you have installed Jupyter Notebook, you can start it by opening your terminal or command prompt and typing &lt;em&gt;&lt;strong&gt;&amp;ldquo;jupyter notebook&amp;rdquo;&lt;/strong&gt;&lt;/em&gt;. This will launch Jupyter Notebook in your default web browser and open a new tab with the Jupyter Notebook dashboard.&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t installed Jupyter Notebook, follow this link to get started:  &lt;a href=&#34;../jupyter_install&#34; target=&#34;_blank&#34;&gt;Get Started with Jupyter notebook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mohan.jpg&#34; alt=&#34;title&#34;&gt;&lt;/p&gt;
&lt;p&gt;To open a new Jupyter Notebook in Jupyter Notebook dashboard, you can click on the &amp;ldquo;New&amp;rdquo; button on the right side of the screen, which will open a new tab in your web browser with a new Jupyter Notebook. From there, you can start writing and running your code.
&lt;img src=&#34;mohan1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now we are ready to write, note, and execute code. Let&amp;rsquo;s begin using Jupyter Notebook and its shortcut keys to perform high-level capabilities&lt;/p&gt;
&lt;h3 id=&#34;command-vs-edit-modes&#34;&gt;Command vs. Edit Modes&lt;/h3&gt;
&lt;p&gt;In Jupyter Notebook, there are two modes: command mode and edit mode.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Command mode&lt;/strong&gt; -Allows you to perform actions at the notebook level. Indicated by a grey cell border with a &lt;font color=teal&gt;&lt;strong&gt;blue&lt;/strong&gt;&lt;/font&gt; left margin.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit mode&lt;/strong&gt; -Allows you to type within a cell. Indicated by a green cell border with a &lt;font color=green&gt;&lt;strong&gt;green&lt;/strong&gt;&lt;/font&gt; left margin.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you&amp;rsquo;re in command mode, press &lt;kbd&gt;Enter&lt;/kbd&gt; to enter edit mode. If you&amp;rsquo;re in edit mode, press &lt;kbd&gt;Esc&lt;/kbd&gt; to enter command mode.&lt;/p&gt;
&lt;h3 id=&#34;command-mode&#34;&gt;Command Mode&lt;/h3&gt;
&lt;p&gt;In Command mode, you can perform various actions on cells, such as creating new cells, deleting cells, copying cells, cutting cells, and pasting cells. You can also move cells up and down, merge cells, split cells, and navigate to different cells. here are some examples&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run current cell and selecct next cell: &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;Enter&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;Run the current cell and select same cell: &lt;kbd&gt;Ctrl&lt;/kbd&gt;+ &lt;kbd&gt;Enter&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;Run the current cell and insert new cell below: &lt;kbd&gt;Alt&lt;/kbd&gt;+ &lt;kbd&gt;Enter&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;Save notebook: &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;S&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;Insert a new cell above the current cell : &lt;kbd&gt;A&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;Insert a new cell below the current cell : &lt;kbd&gt;B&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;Copy and paste : Copy with  &lt;kbd&gt;C&lt;/kbd&gt; and then paste it with &lt;kbd&gt;V&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;Deleting cell :  &lt;kbd&gt;D&lt;/kbd&gt; &lt;kbd&gt;D&lt;/kbd&gt; (i.e., hit the &lt;kbd&gt;D&lt;/kbd&gt; button twice)&lt;/li&gt;
&lt;li&gt;Merge Cell: First select the cells to merge by pressing  &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;⬆&lt;/kbd&gt; or &lt;kbd&gt;⬇&lt;/kbd&gt; then Merge using   &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;M&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;Undo : &lt;kbd&gt;Esc&lt;/kbd&gt; + &lt;kbd&gt;Z&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;View all keyboard shortcut: &lt;kbd&gt;H&lt;/kbd&gt; (in Command mode)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To write code, you need to switch the cell to &lt;strong&gt;code&lt;/strong&gt; mode. For comments and notes, you need to switch the cell to &lt;strong&gt;markdown&lt;/strong&gt; mode. By default, new cells are in code mode, but you can use the following shortcut keys to switch between markdown and code.&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;Y&lt;/kbd&gt; change the cell type to &lt;em&gt;Code&lt;/em&gt; modes.&lt;/p&gt;
&lt;p&gt;&lt;kbd&gt;M&lt;/kbd&gt; change the cell type to &lt;em&gt;Markdown&lt;/em&gt; modes.&lt;/p&gt;
&lt;h3 id=&#34;edit-mode&#34;&gt;Edit Mode&lt;/h3&gt;
&lt;p&gt;In Edit mode, you can edit and modify the content within a cell. This mode allows you to enter and edit text, code, and markdown in the selected cell. Some common actions you can perform in Edit mode include typing, formatting text, executing code, and creating new lines. To enter Edit mode, simply click on a cell or press &amp;lsquo;Enter&amp;rsquo; key when the cell is selected. To exit Edit mode, press &amp;lsquo;Esc&amp;rsquo; or click outside the cell. here are some  functionalities and shortcut keys for edit modes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comment in the text &lt;kbd&gt;&lt;code&gt;Ctrl&lt;/code&gt;&lt;/kbd&gt; + &lt;kbd&gt;&lt;code&gt;/&lt;/code&gt;&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;quick access to all the commands in Jupyter Notebooks: &lt;kbd&gt;&lt;code&gt;Ctrl&lt;/code&gt;&lt;/kbd&gt; + &lt;kbd&gt;&lt;code&gt;Shift&lt;/code&gt;&lt;/kbd&gt; + &lt;kbd&gt;&lt;code&gt;P&lt;/code&gt;&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;insert-image&#34;&gt;Insert Image&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;![caption](picture name and location)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;![screenshot](mohan1.jpg)&lt;/code&gt;- This command imports the picture named &amp;lsquo;mohan1.jpg&amp;rsquo; located in the same folder as the Jupyter notebook.&lt;/p&gt;
&lt;h3 id=&#34;markdown&#34;&gt;Markdown&lt;/h3&gt;
&lt;p&gt;Jupyter Notebook&amp;rsquo;s markdown cells provide a way to write formatted text, headings, bullet points, links, images, and more. Markdown is a simple markup language that is easily readable and provides a lightweight way to add formatting to text.here are some examples:&lt;/p&gt;
&lt;h4 id=&#34;heading&#34;&gt;Heading&lt;/h4&gt;
&lt;p&gt;In Markdown, headings can be created by using the hash symbol (#) followed by a space and the text of the heading. The number of hashes used determines the level of the heading, with one hash being the largest heading (H1) and six hashes being the smallest (H6). For example&lt;/p&gt;
&lt;p&gt;code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Heading 1    
## Heading 2    
### Heading 3
#### Heading 4
##### Heading 5
###### Heading 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;Heading 1&lt;/h1&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;Heading 2&lt;/h2&gt;
&lt;h3 id=&#34;heading-3&#34;&gt;Heading 3&lt;/h3&gt;
&lt;h4 id=&#34;heading-4&#34;&gt;Heading 4&lt;/h4&gt;
&lt;h5 id=&#34;heading-5&#34;&gt;Heading 5&lt;/h5&gt;
&lt;h6 id=&#34;heading-6&#34;&gt;Heading 6&lt;/h6&gt;
&lt;h4 id=&#34;emphasis&#34;&gt;Emphasis&lt;/h4&gt;
&lt;p&gt;bold, italic, and strikethrough are formatting options in Markdown that can be used to add visual interest and clarity to text. here are some examples:&lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*Italic* 
_Italic_

**B0ld** 
__Bold__
 ~~Strikethrough.~~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Italic&lt;/em&gt;    &lt;br&gt;
&lt;em&gt;Italic&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bold&lt;/strong&gt;    &lt;br&gt;
&lt;strong&gt;Bold&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Strikethrough.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;lists&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;lists&#34;&gt;Lists&lt;/h4&gt;
&lt;p&gt;Lists are a great way to organize and present information in Markdown. here is some examples how we can make list in ordered and unordered way in markdown.&lt;/p&gt;
&lt;p&gt;Unordered list can be creat using  &lt;code&gt;*,+,-&lt;/code&gt; for example:
Code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ Item 1
- Item 2
* Item 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Item 1&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Item 2&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Item 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ordered list can be creat using numerical order:
Code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. Item 1
2. Item 2
3. Item 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Item 1&lt;/li&gt;
&lt;li&gt;Item 2&lt;/li&gt;
&lt;li&gt;Item 3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Other Examples of list and sublist
Code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. Today&#39;s
2. date is:
    * Monday
    * 16th January 1991
         - hello! how are
         - how are you?
             - Hope doing well  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Today&amp;rsquo;s&lt;/li&gt;
&lt;li&gt;date is:
&lt;ul&gt;
&lt;li&gt;Monday&lt;/li&gt;
&lt;li&gt;16th January 1991
&lt;ul&gt;
&lt;li&gt;hello! how are&lt;/li&gt;
&lt;li&gt;how are you?
&lt;ul&gt;
&lt;li&gt;Hope doing well&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; - [ ] Item A
 - [x] Item B
 - [x] Item C
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Item A&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Item B&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Item C&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get Started with Jupyter notebook</title>
      <link>https://pudasainimohan.com.np/post/jupyter_install/</link>
      <pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/post/jupyter_install/</guid>
      <description>&lt;p&gt;Jupyter Notebook is a free, open-source web-based platform that enables users to create and share documents that combine live code, mathematical equations, graphics, and narrative text. It has become a popular tool in the data science, machine learning, and scientific computing domains for conducting interactive computing and data analysis. The platform is user-friendly and enables collaboration through sharing and reproducibility. It is most popular platforom for python users.&lt;/p&gt;
&lt;p&gt;Installing   Jupyter Notebook is a simple process that can be done in different ways, depending on your operating system and the resources available on your computer. In this article, we will look at the different ways to install Jupyter Notebook on your computer.&lt;/p&gt;
&lt;h2 id=&#34;installing-jupyter-notebook-using-anaconda&#34;&gt;Installing Jupyter Notebook using Anaconda&lt;/h2&gt;
&lt;p&gt;Anaconda is a distribution of the Python and R programming languages that comes with a comprehensive set of tools for data science and machine learning. To install Jupyter Notebook using Anaconda, follow these steps:&lt;/p&gt;
&lt;h3 id=&#34;1-download-and-install-anaconda&#34;&gt;1. Download and install Anaconda:&lt;/h3&gt;
&lt;p&gt;Visit the Anaconda website (
&lt;a href=&#34;https://www.anaconda.com/products/distribution&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.anaconda.com/products/distribution&lt;/a&gt;) and download the latest version of Anaconda for your operating system.
&lt;img src=&#34;./1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-start-anaconda-navigator&#34;&gt;2. Start Anaconda Navigator:&lt;/h3&gt;
&lt;p&gt;After installation, you can start Anaconda Navigator from your applications menu or by typing &amp;ldquo;anaconda-navigator&amp;rdquo; in your terminal (MacOS/Linux) or Command Prompt (Windows).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;2.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;3.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;3launch-jupyter-notebook&#34;&gt;3.Launch Jupyter Notebook:&lt;/h3&gt;
&lt;p&gt;In Anaconda Navigator, click on the Jupyter Notebook icon to launch the Jupyter Notebook application
&lt;img src=&#34;4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;installing-jupyter-notebook-using-pip&#34;&gt;Installing Jupyter Notebook using pip&lt;/h2&gt;
&lt;p&gt;pip is a package manager for Python that allows you to install and manage packages from the Python Package Index (PyPI). to installed the jupyter notebook first, check wether pip is installed in you system by typing &amp;lsquo;pip &amp;ndash;version&amp;rsquo; in you command prompt.. If pip is installed, you should see the version number of pip, for example, “pip 22.3.1”.o install Jupyter Notebook using pip, follow these steps:&lt;/p&gt;
&lt;h3 id=&#34;1-install-jupyter-notebook&#34;&gt;1. Install Jupyter Notebook&lt;/h3&gt;
&lt;p&gt;Open your terminal (MacOS/Linux) or Command Prompt (Windows) and type the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install jupyter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will install Jupyter Notebook and any dependencies required for the application to run.&lt;/p&gt;
&lt;h3 id=&#34;2-launch-jupyter-notebook&#34;&gt;2. Launch Jupyter Notebook&lt;/h3&gt;
&lt;p&gt;After the installation is complete, you can launch Jupyter Notebook by typing the following command in your terminal or Command Prompt&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will start the Jupyter Notebook server and open a web browser window with the Jupyter Notebook interface.&lt;/p&gt;
&lt;p&gt;There are numerous additional Integrated Development Environments (IDEs) besides Jupyter Notebook that you can use to run Python.Some popular options include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual code studio&lt;/li&gt;
&lt;li&gt;PyCharm&lt;/li&gt;
&lt;li&gt;Python&amp;rsquo;s built-in IDE(IDLE)&lt;/li&gt;
&lt;li&gt;Spyder&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whichever IDE you decide on, it&amp;rsquo;s essential to have a decent understanding of the Python programming language and its syntax before beginning.&lt;/p&gt;
&lt;p&gt;In conclusion, Jupyter Notebook is a powerful tool for data science and machine learning, but it is not the only option for running Python. Depending on your specific needs and preferences, other IDEs such as PyCharm, IDLE, Spyder, or Visual Studio Code may be more suitable for your projects. It&amp;rsquo;s important to familiarize yourself with the different options and choose the one that works best for you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get Started with Python: An Installation Guide</title>
      <link>https://pudasainimohan.com.np/post/python_install/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/post/python_install/</guid>
      <description>&lt;p&gt;Python is a popular, high-level programming language used for web development, scientific computing, data analysis, artificial intelligence, and more. Here is a simple guide to help you install Python on your computer&lt;/p&gt;
&lt;p&gt;There are two main ways to install Python: using a &lt;strong&gt;package manager or downloading the Python executable&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-package-manager&#34;&gt;Using Package Manager:&lt;/h2&gt;
&lt;p&gt;One option to install Python on your computer is to use a package manager or a platform-specific store. For example, on macOS, you can use the Homebrew package manager to install Python. Simply open Terminal and type &amp;ldquo;brew install python&amp;rdquo; to download and install the latest version of Python and its dependencies. On Windows, you can use the Microsoft Store to install Python. Simply search for &amp;ldquo;Python&amp;rdquo; in the Microsoft Store, select the latest version, and click the &amp;ldquo;Get&amp;rdquo; or &amp;ldquo;Install&amp;rdquo; button to download and install Python on your computer. These package managers and platform-specific stores provide a convenient and efficient way to install and manage software packages, including Python, without having to manually download and install them.
&lt;img src=&#34;0.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;downloading-the-python-executable&#34;&gt;Downloading the Python Executable:&lt;/h2&gt;
&lt;p&gt;Another option to install Python on your computer is to download the Python executable from the official Python website. The following are the basic steps to install Python using this method:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Go to the Official Website and download Version&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Visit the official Python website (
&lt;a href=&#34;https://www.python.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.python.org/&lt;/a&gt;) and navigate to the downloads section.
Choose the appropriate version of Python that you want to install on your computer. For example, if you&amp;rsquo;re a beginner, you might want to start with Python 3.x.x.
&lt;img src=&#34;1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;ve selected the appropriate version of Python, click the download button to start the download process.
Make sure to save the installation file to a location where you can easily find it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2: Click Install and Make Sure Add to Path is Checked&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once the download is complete, double-click the installation file to start the installation process.
Follow the on-screen instructions to install Python on your computer.
Make sure to check the option &amp;ldquo;Add to Path&amp;rdquo; when prompted during the installation process. This will ensure that Python is added to your system PATH, making it easier to run Python from the Command Prompt or Terminal.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;2.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;3.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Check Whether Python is Installed Using CMD&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Open the Command Prompt or Terminal and type &amp;ldquo;python&amp;rdquo; or &amp;ldquo;python &amp;ndash;version&amp;rdquo; to check if Python has been installed successfully.
If Python has been installed successfully, you should see a prompt that looks like this: &amp;ldquo;Python 3.11.1&amp;rdquo;. This means that you can start using Python in the Command Prompt or Terminal.
&lt;img src=&#34;4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5: Make Sure Pip is Installed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pip is a package management system used to install and manage Python packages. It is included with Python 3.4 and later versions.
To check if pip is installed, open the Command Prompt or Terminal and type &amp;ldquo;pip &amp;ndash;version&amp;rdquo;.
If pip is installed, you should see the version number of pip, for example, &amp;ldquo;pip 22.3.1&amp;rdquo;.
&lt;img src=&#34;5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it! You&amp;rsquo;ve successfully installed Python on your computer. You&amp;rsquo;re now ready to start exploring the world of Python programming!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Importance of Python in Data Science: A  Overview of its Role and Advantages</title>
      <link>https://pudasainimohan.com.np/post/ml_python_intro/</link>
      <pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/post/ml_python_intro/</guid>
      <description>&lt;p&gt;Python is a high-level, open-source programming language with a wide range of applications, including web development, data analysis, machine learning, and deep learning. It was created in 1991 by Guido van Rossum and is maintained by the Python Software Foundation. Python is considered an essential tool for data scientists and engineers due to its simplicity, versatility, and large community, as well as its numerous libraries and tools that make it ideal for data science tasks. The language is easy to read and write, highly extensible, and has a wealth of resources available, making it a great choice for both beginners and experienced programmers alike. This article will explore the many advantages that make Python an essential language in data science.&lt;/p&gt;
&lt;h3 id=&#34;easy-to-learn&#34;&gt;&lt;strong&gt;Easy to Learn:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Python is widely recognized for its simple and intuitive syntax, which makes it a great language for beginners to learn. The syntax of Python is designed in a way that it is easy to understand and follow, even for those who are new to programming. It does not require a deep understanding of computer science concepts to get started, which allows individuals to focus on learning the basics of programming without getting bogged down by complex syntax or concepts. This simplicity and ease of use is one of the reasons why Python is a popular choice for introductory programming courses.&lt;/p&gt;
&lt;h3 id=&#34;versatile&#34;&gt;&lt;strong&gt;Versatile:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Python is a versatile programming language that is used in a wide range of fields, including web development, scientific computing, artificial intelligence, and more. This versatility makes Python a valuable language for those who are looking to work in different areas of computer science or explore various fields. The large library of modules and frameworks available in Python, as well as its ability to interact with other languages, makes it a versatile choice for many different types of projects.&lt;/p&gt;
&lt;h3 id=&#34;high-demand&#34;&gt;&lt;strong&gt;High Demand:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Python is in high demand in the job market, particularly in fields such as data science, machine learning, and artificial intelligence. Many companies are looking for individuals who are skilled in Python, making it a valuable language to know for those who are looking to advance their careers. The demand for Python is expected to continue to grow, as more and more companies adopt data science and artificial intelligence technologies.&lt;/p&gt;
&lt;h3 id=&#34;large-community&#34;&gt;&lt;strong&gt;Large Community:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Python has a large and active community of users, developers, and enthusiasts who are constantly creating and sharing new tools, libraries, and resources. This community provides a wealth of resources for learning and troubleshooting, making it easy for beginners to get help and support when needed. The community also provides opportunities for collaboration and networking, making it a great place for individuals to grow their skills and build their careers.&lt;/p&gt;
&lt;h3 id=&#34;data-analysis&#34;&gt;&lt;strong&gt;Data Analysis:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Python is equipped with a variety of libraries and tools that make it easy to perform data analysis tasks, such as data cleaning, transforming, and aggregating. Some of the popular libraries for data analysis in Python include NumPy, Pandas, and Matplotlib. These libraries allow data scientists to perform complex data analysis tasks with ease, making it a great choice for data science projects.&lt;/p&gt;
&lt;h3 id=&#34;data-visualization&#34;&gt;&lt;strong&gt;Data Visualization:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Data visualization is an important aspect of data science, and Python offers a range of libraries for creating high-quality visualizations. Some of the popular libraries for data visualization in Python include Matplotlib, Seaborn, and Plotly. These libraries make it easy to create visualizations that help communicate insights and make data more accessible to a wider audience.&lt;/p&gt;
&lt;h3 id=&#34;machine-learning&#34;&gt;&lt;strong&gt;Machine Learning:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Python has a rich ecosystem of libraries for machine learning, which makes it a popular choice for building machine learning models. Some of the popular libraries for machine learning in Python include scikit-learn, TensorFlow, and PyTorch. These libraries provide a range of tools for training and evaluating machine learning models, as well as for tasks such as feature selection, hyperparameter tuning, and model deployment.&lt;/p&gt;
&lt;h3 id=&#34;deep-learning&#34;&gt;&lt;strong&gt;Deep Learning:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Deep learning is a subfield of machine learning that deals with building models that can learn and make decisions based on large amounts of data. Python has a range of libraries for deep learning, including TensorFlow, PyTorch, and Keras, which make it easy to build and train deep learning models. These libraries provide a range of tools and resources for building complex deep learning models, making Python a great choice for deep learning projects.
In conclusion, Python plays a crucial role in data science and is an essential tool for data scientists and engineers. Its user-friendly syntax, versatility, and extensive libraries make it a popular choice for tasks such as data analysis, data visualization, machine learning, and deep learning.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome to my website</title>
      <link>https://pudasainimohan.com.np/post/fist_post/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/post/fist_post/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello everyone,&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Welcome to my personal portfolio website! This site will be dedicated to sharing my skills and knowledge related to  SQL, R , Python and other data science related topics. I am passionate about these fields and aim to share my expertise with others in the hopes of supporting and inspiring others.&lt;/p&gt;
&lt;p&gt;I will be regularly posting updates on this site, so stay tuned for new content. Your feedback is highly valued and appreciated, so please feel free to reach out to me with any questions or comments. You can find my contact information on the bio page above.&lt;/p&gt;
&lt;p&gt;I hope you enjoy exploring this site and learning with me. Let&amp;rsquo;s take this journey together!&lt;/p&gt;
&lt;p&gt;Best regards,   &lt;br&gt;
Mohan&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Under construction</title>
      <link>https://pudasainimohan.com.np/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/slides/example/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>https://pudasainimohan.com.np/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>https://pudasainimohan.com.np/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Terms</title>
      <link>https://pudasainimohan.com.np/terms/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>https://pudasainimohan.com.np/terms/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>https://pudasainimohan.com.np/project/external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/project/external-project/</guid>
      <description>&lt;h1 id=&#34;it-will-update-soon&#34;&gt;It will update soon&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Internal Project</title>
      <link>https://pudasainimohan.com.np/project/internal-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://pudasainimohan.com.np/project/internal-project/</guid>
      <description>&lt;h1 id=&#34;it-will-update-soon&#34;&gt;It will update soon&amp;hellip;.&lt;/h1&gt;
</description>
    </item>
    
  </channel>
</rss>
